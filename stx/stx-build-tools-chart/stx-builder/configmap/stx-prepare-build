#!/bin/bash

git config --global user.name "$GITUSER"
git config --global user.email "$GITEMAIL"
git config --global color.ui false

cd $MY_REPO_ROOT_DIR
if [[ x"$PROXY" == x"true" ]]; then
    ps aux|grep ssh|grep qTfnN 2>&1>/dev/null
    ret=$?
    if [[ x"$ret" != x"0" ]];then
        echo "*************************************************************************************"
        echo "Note: Next we will create the proxy and connect the proxyserver $PROXYSERVER!!!"
        echo ""
        echo ""
        echo "*************************************************************************************"
        ssh -D 8080 -qTfnN $HOSTUSERNAME@$PROXYSERVER
    fi

    if [[ ! -f .repo-init-done ]] ; then
        proxychains repo init -u https://opendev.org/starlingx/manifest -b $BUILD_BRANCH -m ${MANIFEST} && \
        proxychains repo sync --force-sync && \
        touch .repo-init-done
    fi
else
    if [[ ! -f .repo-init-done ]] ; then
        repo init -u https://opendev.org/starlingx/manifest -b $BUILD_BRANCH -m ${MANIFEST} && \
        repo sync --force-sync && \
        touch .repo-init-done
    fi
fi

sudo apt-get update

# create deb-local-binary empty repo for building first package, certainly the developer
# also could select to download the other binary list in deb-mirror-tools directory with
# debdownloader command, for example we download the base-${DEBIAN_DISTRIBUTION}.lst 
# before building image.
TMPLIST=`mktemp /tmp/XXXXXX.lst`
debdownloader $TMPLIST
rm $TMPLIST

if [[ x"$SOURCESLIST" != x"" ]]; then
    if [[ x"$DEBLIST" == x"" ]]; then
	if [[ x"$DSCLIST" == x"" ]]; then
            echo "Either deblist or dsclist must not NULL!!!!"
	    return 1
	else
            repo_manage.py download --sources_list=$SOURCESLIST  --dsc_list=$DSCLIST
	fi
    else
	if [[ x"$DSCLIST" == x"" ]]; then
	    repo_manage.py download --sources_list=$SOURCESLIST --deb_list=$DEBLIST
	else
            repo_manage.py download --sources_list=$SOURCESLIST --deb_list=$DEBLIST --dsc_list=$DSCLIST
	fi
    fi
fi

touch /home/$MYUNAME/prepare-build.done

echo "************************************************************************************************"
echo "Prepare Done!"
echo "************************************************************************************************"
